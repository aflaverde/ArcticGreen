import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import time
from t2listing import *
from t2data import *
from t2incons import *
from t2grids import *
# Set up steam tables
from pyXSteam.XSteam import XSteam
steam_table = XSteam(XSteam.UNIT_SYSTEM_MKS)
from datetime import datetime
import subprocess

# Parent directory containing all data
parent_dir = 'C:/Users/arctic_vm1/Documents/PetraSim models/Qinghe/'
grid_search_dir = parent_dir + 'Grid_search/'
# Model version to base iteration from
# TODO modify to latest model version
model_version = 'Qinghe_V07'
original_dat_file_name = parent_dir + model_version+'/'+model_version+'.dat'   # Original TOUGH2 .dat file

# TOUGH2 EOS1 executable
tough2_eos1_exe = 'C:/Users/arctic_vm1/Documents/PetraSim models/Qinghe/Grid_search/EOS1.exe'

print('MODEL VERSION: '+model_version)

# Rock types and their respective model layers
############ TODO NEEDS TO BE MODIFIED MANUALLY FOR EACH MODEL
rocktypes_prod_zone = {'NM007':9, 'NG001':10, 'NG002':11, 'NG003':12, 'NG004':13, 'NG005':14, 'ED001':15, 'BOTT1':16}

## Grid search algorithm to modify porosity and permeability keeping anisotropy of the 5 reservoir layers
# Permeability factor modified by orders of 10, porosity normal
# Iterate over permeability factors and porosity values lists to create new TOUGH2 .dat files for each combination
k_factors = [1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04]
porosity = np.arange(0.02, 0.50, 0.02)

# Get GOFT block from original dat file
with open(original_dat_file_name, 'r') as dat_fp:
    # Read all lines from the input file
    lines = dat_fp.readlines()
# Find the index of the line containing "GOFT"
start_index = next(i for i, line in enumerate(lines) if "GOFT" in line)
# Find the index of the line containing "ENDCY"
end_index = next(i for i, line in enumerate(lines) if "ENDCY" in line)
# Extract the lines between "GOFT" and "ENDCY"
og_goft_block = lines[start_index:end_index+1]

def generate_dat_files_grid_search():
    start_time = time.time()
    print('Started generating TOUGH2 dat files at', datetime.now())
    for kf in k_factors:
        for phi_new in porosity:
            # Import TOUGH2 data
            dat = t2data(original_dat_file_name)
            grid = dat.grid
            rocktypes = grid.rocktype

            # Generate unique file name based on parameters
            dat_file_name = f"datQinghe_V07_k{str(kf).replace('.', '_')}_phi{str(round(phi_new,2)).replace('.', '_')}.dat"
            new_dir_dat_path = os.path.join(grid_search_dir, dat_file_name.split('.')[0])
            if not os.path.exists(new_dir_dat_path):
                   os.mkdir(new_dir_dat_path)

            dat_file_path = os.path.join(new_dir_dat_path, dat_file_name)

            # Modify dat file
            for rock_name, lyr_n in rocktypes_prod_zone.items():
                k_0x, k_0y, k_0z = rocktypes[rock_name].permeability
                k_new = [k_0x*kf, k_0x*kf, k_0z*kf]
                # Create rock type with scaled perm and porosity
                new_rock = rocktype(name=rock_name, permeability=k_new, porosity=phi_new, nad=0, conductivity=rocktypes[rock_name].conductivity,
                        density=rocktypes[rock_name].density, specific_heat=rocktypes[rock_name].specific_heat)
                grid.add_rocktype(new_rock)

            dat.write(dat_file_path)

            # Replace goft block generated by PyTOUGH by the original one with the well source indexes
            with open(dat_file_path, 'r') as dat_fp:
                dat_lines = dat_fp.readlines()
            # Find the index of the line containing "GOFT"
            start_del = next(i for i, line in enumerate(dat_lines) if "GOFT" in line)
            # Find the index of the line containing "ENDCY"
            end_del = next(i for i, line in enumerate(dat_lines) if "ENDCY" in line)
            # Delete lines of the GOFT block and replace them with the original one
            del dat_lines[start_del:end_del+1]
            # Write the modified file
            dat_lines.extend(og_goft_block)
            with open(dat_file_path, 'w') as out_dat:
                out_dat.writelines(dat_lines)

    end_time = time.time()
    exec_time = end_time - start_time
    print('Finished generating TOUGH2 dat files for Grid Search after', str(round(exec_time,4)), 'seconds.')

def run_pyt2_grid_search(dat_file_path):
    dat_t2 = t2data(dat_file_path)
    start_time = time.time()
    print('------------------Started TOUGH2 running simulation------------------', '\nat', datetime.now())
    print('Running file ' + os.path.basename(dat_file_path))
    # Change to dat file directory to save all output files in each one
    os.chdir(os.path.dirname(dat_file_path))
    dat_t2.run(simulator=tough2_eos1_exe, silent=False, output_filename=dat_file_path.split(".")[0]+'.out')
    # Remove listing, conn.csv, mesh.csv files to save space
    os.remove(dat_file_path.split(".")[0]+'.out')
    os.remove(os.path.dirname(dat_file_path)+'/conn.csv')
    os.remove(os.path.dirname(dat_file_path)+'/mesh.csv')
    # Go back to parent dir
    os.chdir(parent_dir)
    end_time = time.time()
    exec_time = end_time - start_time
    print('\nFinished TOUGH2 simulation after', str(round(exec_time,4)), 'seconds.')

def run_t2_exe(dat_file_path):
    dat_t2 = t2data(dat_file_path)
    start_time = time.time()
    print('------------------Started TOUGH2 running simulation------------------', '\nat', datetime.now())
    dat_file = os.path.basename(dat_file_path)
    print('Running file ' + dat_file)
    os.chdir('Grid_search')
    os.system('EOS1.exe'+' < ' + dat_file + ' > ' + dat_file.split('.')[0] +'.out')
    # Go back to parent dir
    os.chdir(parent_dir)
    end_time = time.time()
    exec_time = end_time - start_time
    print('\nFinished TOUGH2 simulation after', str(round(exec_time,4)), 'seconds.')

def batch_run_t2():
    for subdir, dirs, files, in os.walk(grid_search_dir):
        for file in files:
            dat_path = os.path.join(subdir, file)
            if file[-3:] == 'dat':
                run_pyt2_grid_search(dat_path)
                # run_t2_exe(dat_path)
            

################################
#           RUN

# generate_dat_files_grid_search()
# run_pyt2_grid_search('C:/Users/arctic_vm1/Documents/PetraSim models/Qinghe/Grid_search/datQinghe_V07_k0_001_phi0_01/datQinghe_V07_k0_001_phi0_01.dat')
# run_t2_exe('C:/Users/arctic_vm1/Documents/PetraSim models/Qinghe/Grid_search/datQinghe_V07_k0_1_phi0_1/datQinghe_V07_k0_1_phi0_1.dat')
# batch_run_t2()

# X, Y = np.meshgrid(k_factors, porosity)
# plt.figure()
# plt.scatter(X, Y)
# plt.xscale('log')
# plt.xlabel('log(Permeability multiplier)')
# plt.ylabel('Porosity (%)')
# # plt.show()